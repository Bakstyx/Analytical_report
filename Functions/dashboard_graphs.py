from dash import Dash
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import pandas as pd
import numpy as np


# Function

#Bar graphs

def bar(data, x, y, hue, title, order=None):
    fig = px.bar(data, x=x, y=y, color=hue, barmode="group",
                    color_discrete_sequence=px.colors.qualitative.Dark2,
                    category_orders=order)
    fig.update_layout(
        title = dict(
            text = title
        ),
        transition_duration=500
    )
    return fig

def box(data, x, y, hue, title, points=None):
    fig = px.box(data, x=x, y=y, color=hue, 
                    color_discrete_sequence=px.colors.qualitative.Dark2,
                    points=points)
    fig.update_layout(
        title = dict(
            text = title
        ),
        transition_duration=500
    )
    return fig


def pie_grid_status(dataframe, rows_grid, cols_grid, 
                    labels, values, title):
    #grid parameters
    Methods = dataframe[rows_grid].unique().tolist()
    Limits = dataframe[cols_grid].unique().tolist()
    
    #pie colors
    pie_colors = ['#d9901cf2', '#489136f2',] 
    
    #grid parameters autogenerated lists
    subplot_titles = []
    specs = []
    for method in Methods:
        row_list = []
        for limit in Limits:
            subtitle = method + ' ' + limit
            subplot_titles.append(subtitle)
            spec = {'type':"domain"}
            row_list.append(spec)
        specs.append(row_list)

    #Sublots structure    
    fig  = make_subplots(specs=specs, 
                        subplot_titles=subplot_titles,
                        rows=int(len(Methods)),
                        cols=int(len(Limits)),
                        )
    #plot
    for i, method in enumerate(Methods):
        for j, decision in enumerate(Limits):
            data=dataframe[(dataframe[rows_grid]==method)&(dataframe[cols_grid]==decision)]
            data.reset_index(drop=True, inplace=True)
            fig.add_trace(go.Pie(labels=data[labels], 
                                values=data[values], 
                                marker_colors= pie_colors, 
                                sort=False), 
                        row=i+1, 
                        col=j+1)
            fig.update_traces(
                hoverinfo='label+percent', textinfo='value', textfont_size=12,
            )
            fig.update_annotations(
                font_size=12
                )
            fig.update_layout(
                title_text=title,
        )


    return fig